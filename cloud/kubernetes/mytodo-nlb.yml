---
# Application to deploy
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mytodo
  # namespace: mytodo
spec:
  replicas: 3 # tells deployment to run 2 pods
  selector:
    matchLabels:
      app: mytodo
  template:   # create pods using pod definition in this template
    metadata:
      labels:
        app: mytodo
        tier: frontend
    spec:
      containers:
      - name: mytodo
        image: de.icr.io/mace/mytodo:lts-alpine3.19
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 250m     # 250 millicores = 1/4 core
            memory: 128Mi # 128 MB
          limits:
            cpu: 500m
            memory: 384Mi
        livenessProbe:
          httpGet:
            path: /healthcheck/
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
          failureThreshold: 2        

---
apiVersion: v1
kind: Service
metadata:
  name: nlb-tcp
  # namespace: default
  annotations:
    service.kubernetes.io/ibm-load-balancer-cloud-provider-enable-features: "nlb"
    service.kubernetes.io/ibm-load-balancer-cloud-provider-ip-type: "public"
    #optional service.kubernetes.io/ibm-load-balancer-cloud-provider-vpc-node-selector: "<key>=<value>"
    #optional service.kubernetes.io/ibm-load-balancer-cloud-provider-vpc-subnets: "0797-91785612-96be-48eb-a42b-448c79975ef7"
    #optional service.kubernetes.io/ibm-load-balancer-cloud-provider-zone: "eu-gb-2"
    #optional service.kubernetes.io/ibm-load-balancer-cloud-provider-vpc-health-check-udp: "<tcp_port"
  labels:
    app: mytodo
    tier: frontend
spec:
  type: LoadBalancer
  selector:
    app: mytodo
    tier: frontend
  ports:
  - name: 8p80-tcp
    port: 8080
    protocol: TCP
    targetPort: 8080